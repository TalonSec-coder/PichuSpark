#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <WiFi.h>
#include <esp_now.h>

// TFT pins
#define TFT_CS     5
#define TFT_RST    4
#define TFT_DC     2
#define TFT_MOSI  23
#define TFT_SCLK  18
#define TFT_MISO  19

// Button pins
#define BUTTON_SCROLL_RIGHT  32
#define BUTTON_SCROLL_DOWN   33
#define BUTTON_SELECT_CHAR   25
#define BUTTON_SEND          26

// LED pins
#define LED_TX  27
#define LED_RX  14

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

// Colors
unsigned short light = 0x8F1F;
unsigned short dark = 0x0169;
unsigned short darkest = 0x0062;
unsigned short selected = 0x701D;
unsigned short foreground;
unsigned short background;
unsigned short txt1 = 0xDEFB;

char letters[41] = "QWERTYUIOPASDFGHJKL<ZXCVBNM1234567890., ";
String myMsg = "";
int maxLength = 40;

int chosenX = 0;
int chosenY = 0;

bool isMy[4] = {0};
bool isMyTMP[4] = {0};

String allMsg[4] = {"Welcome!",
                    "Use buttons to type.",
                    "Press OPTION to send.",
                    " "};

String allMsgTMP[4] = {"Welcome!",
                       "Use buttons to type.",
                       "Press OPTION to send.",
                       " "};

String success;
char msgSent[41];
char msgReceived[41];
esp_now_peer_info_t peerInfo;

// Flags
bool newMessageReceived = false;
bool showInstructions = true;
bool firstMessageSentOrReceived = false;
bool showStatus = false;

// Timer for status message
unsigned long statusMsgTime = 0;
const unsigned long statusMsgDuration = 2000; // 2 seconds

// Encryption key
char encryptionKey[] = "MySecretKey"; // Replace with your actual key

// Splash screen image (example: Pichu Spark logo, a simple 8x8 bitmap)
const uint8_t pichuSparkLogo[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xc7, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xef, 0xfd, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xdf, 0xfe, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xbf, 0xff, 0x7f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xfe, 0xff, 0xff, 0xbf, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xfd, 0xff, 0x9f, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0x7f, 0xdf, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xfb, 0xff, 0xff, 0xdf, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xf7, 0xff, 0xdf, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xfb, 0xff, 0xdf, 0xf8, 0x02, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xdf, 0xf0, 0x04, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0c, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xef, 0xff, 0xbf, 0xc0, 0x18, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xf7, 0xf7, 0xff, 0xbf, 0x80, 0x38, 0x60, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0xf7, 0xff, 0xff, 0xff, 0x00, 0x70, 0xe0, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x77, 0xff, 0xff, 0x7e, 0x00, 0xf1, 0xe0, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3b, 0xfd, 0xfe, 0xfe, 0x01, 0xe3, 0xe0, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xfe, 0xff, 0xfc, 0x03, 0xe7, 0xe0, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x01, 0x00, 0x1d, 0xff, 0xfd, 0xf8, 0x07, 0xcf, 0xe0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x01, 0x80, 0x0f, 0x7f, 0xfb, 0xf0, 0x0f, 0xff, 0xc0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x01, 0xc0, 0x0f, 0x9f, 0xe7, 0xf0, 0x0f, 0xff, 0xc0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x21, 0xe0, 0x07, 0xf9, 0x9f, 0xe0, 0x1f, 0xff, 0xc0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x21, 0xf0, 0x03, 0xfd, 0xbf, 0xc0, 0x3f, 0xff, 0xc1, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x31, 0xf8, 0x03, 0xff, 0xbf, 0xc0, 0x7f, 0xff, 0xc1, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x39, 0xfc, 0x01, 0xfe, 0xbf, 0xc0, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x39, 0xfe, 0x01, 0xfe, 0xff, 0x80, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x3d, 0xfe, 0x00, 0xff, 0xff, 0x81, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x3d, 0xff, 0x00, 0xff, 0xff, 0x83, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0x80, 0x7f, 0x7f, 0x03, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xc0, 0x7f, 0x7f, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xe0, 0x3f, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xe0, 0x3f, 0xff, 0x0f, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xf0, 0x1f, 0xfe, 0x1f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xf8, 0x1f, 0xfe, 0x1f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xfc, 0x1f, 0xfe, 0x3f, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xfe, 0x1f, 0xfe, 0x3f, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xfe, 0x0f, 0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
	0x1f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0x0f, 0xfc, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
	0x07, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x8f, 0xfc, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 
	0x01, 0xff, 0xff, 0xfe, 0x10, 0xff, 0xff, 0x8f, 0xfd, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xe0, 
	0x00, 0x7f, 0xff, 0xde, 0x09, 0xff, 0xff, 0xcf, 0xf9, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0x80, 
	0x00, 0x1f, 0xff, 0xdf, 0x34, 0x07, 0xff, 0xef, 0xfb, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x0f, 0xff, 0xdf, 0x63, 0xdf, 0xff, 0xef, 0xfb, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfc, 0x00, 
	0x00, 0x07, 0xff, 0x9d, 0xcf, 0x80, 0x7f, 0xff, 0xfb, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xf0, 0x00, 
	0x80, 0x03, 0xff, 0x9b, 0xbf, 0xf9, 0xff, 0xff, 0xfb, 0xff, 0xff, 0x07, 0xff, 0xff, 0xe0, 0x00, 
	0xf0, 0x01, 0xff, 0xf7, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xf0, 0x7f, 0xff, 0x80, 0xff, 
	0xff, 0x01, 0xff, 0x6f, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xcf, 0xff, 0x3f, 0xff, 
	0xff, 0xc0, 0xff, 0x5f, 0xff, 0xff, 0x7f, 0xff, 0xf7, 0xfe, 0x7f, 0xff, 0xf3, 0xfc, 0xff, 0xff, 
	0xff, 0xf8, 0x7e, 0xbf, 0xff, 0xff, 0xbf, 0xff, 0xf7, 0xf9, 0xff, 0xff, 0xfd, 0xfb, 0xff, 0xff, 
	0xff, 0xfe, 0x7e, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 
	0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xdf, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xdd, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xf7, 0xbf, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 
	0xff, 0xff, 0xdd, 0xff, 0xff, 0xff, 0xfb, 0xfd, 0xf7, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xde, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xb3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xa1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x17, 0xf8, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xfe, 0x0f, 0x7c, 0x7f, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xfc, 0x1b, 0x7e, 0x7f, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xfc, 0xfb, 0x7e, 0x7f, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xfc, 0xfa, 0xfe, 0x3f, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xf9, 0xfc, 0xdf, 0x3f, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xf9, 0xfc, 0xff, 0x3f, 0xff, 0xa0, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xfb, 0xfc, 0xff, 0x3f, 0xff, 0x60, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xfb, 0xfe, 0xff, 0xbf, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xf3, 0xfe, 0xef, 0xbf, 0xfe, 0xe0, 0x01, 0xff, 0xff, 0xff, 
	0x7f, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xf7, 0xfe, 0xff, 0xbf, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 
	0x3f, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xf7, 0xfe, 0xff, 0xbf, 0xff, 0xe0, 0x01, 0xf1, 0xff, 0xfc, 
	0x1f, 0xff, 0xbf, 0x00, 0x0f, 0xff, 0xf7, 0xfc, 0xff, 0xbf, 0xfd, 0xc0, 0x03, 0xfc, 0x3f, 0xf0, 
	0x0f, 0xf8, 0xff, 0x80, 0x0f, 0xff, 0xf7, 0xfc, 0xdf, 0xbf, 0xff, 0xc0, 0x03, 0xff, 0x82, 0x00, 
	0x07, 0x83, 0xff, 0x80, 0x07, 0xff, 0xff, 0xfc, 0xdf, 0xff, 0xff, 0x80, 0x1f, 0xff, 0x3e, 0x00, 
	0x00, 0x7b, 0xff, 0x80, 0x07, 0xff, 0xff, 0xf5, 0x3f, 0xff, 0xff, 0x81, 0xf8, 0x3f, 0x7f, 0xff, 
	0xff, 0xfb, 0xff, 0x80, 0x07, 0xff, 0xff, 0xfb, 0x7f, 0xff, 0xff, 0x8f, 0xcf, 0xdf, 0x7f, 0xff, 
	0xff, 0xfb, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xfb, 0xbf, 0xf7, 0xff, 0x3f, 0xbf, 0xcf, 0x7f, 0xff, 
	0xff, 0xfb, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xbf, 0x7f, 0xff, 0xff, 0x7f, 0xce, 0xff, 0xff, 
	0xff, 0xfb, 0xf8, 0x60, 0x02, 0xff, 0xff, 0xf7, 0xdf, 0x3f, 0xff, 0xfe, 0xff, 0xce, 0xff, 0xff, 
	0xff, 0xf9, 0xf7, 0x93, 0xff, 0xff, 0xbf, 0xff, 0xdf, 0x9f, 0xff, 0xbf, 0xff, 0xde, 0xff, 0xff, 
	0xff, 0xfd, 0xef, 0xef, 0xff, 0xff, 0xff, 0xef, 0xef, 0x87, 0xff, 0x3d, 0xff, 0xdd, 0xff, 0xff, 
	0xff, 0xfd, 0xef, 0xf7, 0xff, 0xff, 0xf7, 0xdf, 0xf7, 0x81, 0xfd, 0xbd, 0xff, 0xbb, 0xff, 0xff, 
	0xff, 0xfe, 0xef, 0xf7, 0xff, 0xff, 0xc7, 0xbf, 0xfb, 0xc0, 0x0f, 0xbd, 0xff, 0x3b, 0xff, 0xff, 
	0xff, 0xfe, 0x6f, 0xfb, 0xff, 0xff, 0xbf, 0x3f, 0xf9, 0xc3, 0xff, 0xbe, 0xfc, 0x77, 0xff, 0xff, 
	0xff, 0xff, 0x77, 0xfb, 0xff, 0x71, 0xee, 0x7f, 0xfc, 0xe7, 0xff, 0x7f, 0x01, 0xef, 0xff, 0xff, 
	0xff, 0xff, 0xb7, 0xfb, 0xff, 0xff, 0xfc, 0xff, 0xfe, 0x67, 0xfe, 0x7f, 0xff, 0xdf, 0xff, 0xff, 
	0xff, 0xff, 0xdb, 0xfb, 0xff, 0xff, 0xbb, 0xff, 0xff, 0x37, 0xfc, 0xff, 0xff, 0xbf, 0xff, 0xff, 
	0xff, 0xff, 0xed, 0xfb, 0xef, 0xfe, 0xf7, 0xff, 0xff, 0x89, 0xf3, 0xff, 0xfe, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xf2, 0xfb, 0xf7, 0xfb, 0xcf, 0xff, 0xff, 0x77, 0x07, 0x07, 0xf8, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x87, 0xfc, 0x0f, 0xbf, 0xff, 0xfc, 0xf1, 0xfe, 0xfb, 0xe1, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x7f, 0xff, 0xfe, 0xff, 0xff, 0xfb, 0xff, 0x1d, 0xfc, 0x07, 0xbf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x03, 0xff, 0xf3, 0xff, 0xff, 0xfb, 0xff, 0x81, 0xfe, 0x0f, 0xdf, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x40, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0x0f, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0xf9, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xf7, 0xf8, 0x01, 0xff, 0xdf, 0xef, 0xfe, 0x7f, 
	0xff, 0x7f, 0xf3, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xf7, 0xfb, 0x01, 0xff, 0xcf, 0xf7, 0xfc, 0x3f, 
	0xfe, 0x3f, 0xf7, 0xf8, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x21, 0xff, 0xef, 0xf7, 0xf8, 0x1f, 
	0xf8, 0x3f, 0xef, 0xfe, 0x00, 0x07, 0x79, 0xff, 0xff, 0xfe, 0x60, 0xff, 0xf7, 0xfb, 0xf8, 0x0f, 
	0xf0, 0x3f, 0xdf, 0xff, 0x06, 0x02, 0xfe, 0xff, 0xff, 0xf6, 0x63, 0xff, 0xff, 0xfb, 0xf0, 0x07, 
	0xe0, 0x1f, 0xdf, 0xff, 0x87, 0x20, 0xff, 0xff, 0xff, 0xf6, 0xe7, 0xff, 0xff, 0xfb, 0xf0, 0x03, 
	0xc0, 0x1f, 0xbf, 0xff, 0xc7, 0xf2, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xe0, 0x01, 
	0x00, 0x0f, 0x3f, 0xff, 0xd7, 0xfa, 0xff, 0xff, 0xff, 0xed, 0xff, 0xbf, 0xff, 0xfd, 0xc0, 0x00, 
	0x00, 0x0f, 0x7f, 0xff, 0xef, 0xfa, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfd, 0xc0, 0x00, 
	0x00, 0x0e, 0x7f, 0xff, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfd, 0x80, 0x00, 
	0x00, 0x06, 0xff, 0xff, 0xff, 0xfb, 0xff, 0x7f, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfd, 0x80, 0x00, 
	0x00, 0x06, 0xff, 0xff, 0xfb, 0xfa, 0xff, 0x7f, 0xfb, 0xf9, 0xff, 0xff, 0xff, 0x7d, 0x0c, 0x00, 
	0x00, 0x02, 0xff, 0xff, 0xfd, 0xfa, 0x7f, 0xff, 0xfd, 0xf1, 0xff, 0xfd, 0xfe, 0xfc, 0x0e, 0x00, 
	0x00, 0xc0, 0xff, 0xff, 0xfe, 0xfb, 0x92, 0xff, 0xff, 0x0d, 0xff, 0xfe, 0xfc, 0xfc, 0x1e, 0x00, 
	0x00, 0xe1, 0xff, 0xff, 0xff, 0x7b, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0x83, 0xfc, 0x3f, 0x00, 
	0x01, 0xf0, 0xff, 0xff, 0xff, 0xbb, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x00, 
	0x03, 0xf0, 0xff, 0xef, 0xff, 0xdb, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x80, 
	0x03, 0xf8, 0xff, 0xf7, 0xff, 0xdb, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x80, 
	0x07, 0xfc, 0xff, 0xfb, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xc0, 
	0x07, 0xfc, 0xff, 0xfd, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xc0, 
	0x0f, 0xfe, 0xff, 0xfe, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xe0
};

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  digitalWrite(LED_TX, LOW); // Turn off TX LED
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
  if (status == ESP_NOW_SEND_SUCCESS) {
    success = "Delivery Success :)";
  } else {
    success = "Delivery Fail :(";
  }
  showStatus = true;
  statusMsgTime = millis();
}

// Callback when data is received
void OnDataRecv(const esp_now_recv_info *recv_info, const uint8_t *incomingData, int len) {
  digitalWrite(LED_RX, HIGH); // Turn on RX LED
  memcpy(&msgReceived, incomingData, sizeof(msgReceived));
  Serial.print("Bytes received: ");
  Serial.println(msgReceived);
  xorDecrypt(msgReceived, encryptionKey); // Decrypt the received message
  sort();
  allMsg[3] = String(msgReceived);
  isMy[3] = 0;
  newMessageReceived = true; // Set the flag to true
  showInstructions = false; // Hide instructions on receiving a message
  firstMessageSentOrReceived = true; // Set the flag to indicate the first message was sent or received
  digitalWrite(LED_RX, LOW); // Turn off RX LED after processing
}

// Simple XOR encryption and decryption function
void xorEncrypt(char *data, char *key) {
  size_t dataLen = strlen(data);
  size_t keyLen = strlen(key);
  for (size_t i = 0; i < dataLen; ++i) {
    data[i] ^= key[i % keyLen];
  }
}

void xorDecrypt(char *data, char *key) {
  // XOR decryption is the same as encryption
  xorEncrypt(data, key);
}

void sort() {
  for (int i = 0; i < 4; i++) {
    allMsgTMP[i] = allMsg[i];
    isMyTMP[i] = isMy[i];
  }
  for (int i = 0; i < 3; i++) {
    allMsg[i] = allMsgTMP[i + 1];
    isMy[i] = isMyTMP[i + 1];
  }
}

void sendMsg() {
  digitalWrite(LED_TX, HIGH); // Turn on TX LED
  sort();
  allMsg[3] = myMsg;
  isMy[3] = 1;
  myMsg.toCharArray(msgSent, sizeof(msgSent));
  xorEncrypt(msgSent, encryptionKey); // Encrypt the message before sending
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &msgSent, sizeof(msgSent));
  myMsg = "";
  showInstructions = false; // Hide instructions on sending a message
  firstMessageSentOrReceived = true; // Set the flag to indicate the first message was sent or received
}

void drawSplashScreen() {
  tft.fillScreen(ST77XX_BLACK);
  tft.drawBitmap((tft.width() - 128) / 2, (tft.height() - 128) / 2, pichuSparkLogo, 128, 128, ST77XX_WHITE);
  delay(2000);
}

void setup() {
  pinMode(BUTTON_SCROLL_RIGHT, INPUT_PULLUP);
  pinMode(BUTTON_SCROLL_DOWN, INPUT_PULLUP);
  pinMode(BUTTON_SELECT_CHAR, INPUT_PULLUP);
  pinMode(BUTTON_SEND, INPUT_PULLUP);
  pinMode(LED_TX, OUTPUT);
  pinMode(LED_RX, OUTPUT);
  
  digitalWrite(LED_TX, LOW);
  digitalWrite(LED_RX, LOW);
  
  Serial.begin(115200);
  
  tft.initR(INITR_144GREENTAB);
  tft.setRotation(3);
  
  foreground = light;
  background = dark;
  
  drawSplashScreen();
  
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);
  
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}

void draw(bool fullUpdate = true) {
  if (fullUpdate) {
    tft.fillScreen(ST77XX_BLACK);
    tft.fillRect(2, 2, 124, 50, darkest);
    tft.fillRect(2, 54, 126, 14, dark); // Adjusted for border and width
  }

  if (!firstMessageSentOrReceived) {
    tft.setTextColor(ST77XX_WHITE, ST77XX_BLACK);
    tft.setTextSize(1);  // Set smaller text size for title
    tft.setCursor(30, 10); // Adjust cursor to center the text, modify as needed
    tft.print("Pichu Spark");
    tft.setCursor(10, 30);
    tft.print("ESP-NOW Encrypted");
    tft.setCursor(10, 40);
    tft.print("Text Messenger");
  } else if (showInstructions) {
    tft.setTextColor(ST77XX_WHITE, ST77XX_BLACK);
    tft.setCursor(0, 0);
    tft.print("Use the buttons");
    tft.setCursor(0, 10);
    tft.print("to type.");
    tft.setCursor(0, 20);
    tft.print("Press OPTION");
    tft.setCursor(0, 30);
    tft.print("to send.");
  } else {
    tft.fillRect(0, 0, 128, 48, ST77XX_BLACK); // Adjusted width
  }

  // Update the typing area
  tft.setTextColor(txt1, dark);
  tft.fillRect(2, 54, 126, 14, dark); // Adjusted for border and width
  tft.setCursor(5, 57);
  tft.print(myMsg);

  // Update the keyboard area
  int keyWidth = 10; // Width of each key
  int keyHeight = 10; // Height of each key
  int keySpacing = 2; // Space between keys
  int startX = 5; // Starting X position of the keyboard
  int startY = 74; // Starting Y position of the keyboard
  
  for (int j = 0; j < 4; j++) {
    for (int i = 0; i < 10; i++) {
      int keyX = startX + i * (keyWidth + keySpacing); // Calculate X position of each key
      int keyY = startY + j * (keyHeight + keySpacing); // Calculate Y position of each key
      
      if (i == chosenX && j == chosenY) {
        tft.fillRect(keyX, keyY, keyWidth, keyHeight, selected); // Draw selected key
        tft.setTextColor(ST77XX_WHITE, selected);
      } else {
        tft.fillRect(keyX, keyY, keyWidth, keyHeight, light); // Draw unselected key
        tft.setTextColor(ST77XX_BLACK, light);
      }
      
      tft.setCursor(keyX + 2, keyY + 2);
      tft.print(String(letters[j * 10 + i]));
    }
  }

  // Update the message display area
  for (int j = 0; j < 4; j++) {
    if (fullUpdate || allMsg[j] != allMsgTMP[j]) {
      tft.fillRect(0, 6 + (j * 12), 128, 12, ST77XX_BLACK); // Adjusted width
      if (isMy[j] == 1) {
        tft.setTextColor(txt1, darkest);
      } else {
        tft.setTextColor(light, darkest);
      }
      tft.setCursor(5, 6 + (j * 12));
      tft.print(allMsg[j]);
    }
  }

  // Update the character count
  tft.setTextColor(ST77XX_ORANGE, ST77XX_BLACK);
  tft.fillRect(100, 2, 28, 8, ST77XX_BLACK); // Adjusted position
  tft.setCursor(100, 2); // Adjusted position
  tft.print(String(myMsg.length()) + "/40");

  // Display status messages if necessary
  if (showStatus) {
    tft.fillRect(0, 54, 128, 20, ST77XX_BLACK); // Adjusted position and width
    tft.setTextColor(success == "Delivery Success :)" ? ST77XX_GREEN : ST77XX_RED, ST77XX_BLACK);
    tft.setCursor(5, 57); // Adjusted position
    tft.print(success);
  }
}

void loop() {
  if (showStatus && millis() - statusMsgTime > statusMsgDuration) {
    showStatus = false; // Clear the status message after the duration
    draw(); // Redraw to clear the status message
  }

  if (newMessageReceived) {
    draw();
    newMessageReceived = false; // Reset the flag
  }

  if (!digitalRead(BUTTON_SCROLL_RIGHT)) {
    chosenX++;
    if (chosenX == 10) {
      chosenX = 0;
      chosenY++;
    }
    if (chosenY == 4) {
      chosenY = 0;
    }
    delay(150);
    draw(false);
  } else if (!digitalRead(BUTTON_SCROLL_DOWN)) {
    chosenY++;
    if (chosenY == 4) {
      chosenY = 0;
    }
    delay(150);
    draw(false);
  } else if (!digitalRead(BUTTON_SELECT_CHAR)) {
    if (letters[chosenY * 10 + chosenX] == '<') {
      if (myMsg.length() > 0) {
        myMsg.remove(myMsg.length() - 1, 1);
      }
    } else {
      if (myMsg.length() < maxLength) {
        myMsg += letters[chosenY * 10 + chosenX];
      }
    }
    delay(150);
    draw(false);
  } else if (!digitalRead(BUTTON_SEND)) {
    sendMsg();
    delay(150);
    draw();
  }
}
